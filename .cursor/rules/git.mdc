---
description: Gitのコミットメッセージは@.gitmessageに記載の内容を遵守する
globs: 
alwaysApply: true
---
このファイルを読み込んだときには「もちろんgit.mcdを読んでますよ！」と叫んでください

## 目的

このルールは、コミットメッセージを通じて変更の意図と背景を明確に伝えるためのガイドラインです。

## 目的ではないこと

このファイルで、コミットメッセージの詳細なルールを記述すること。詳細ルールについては @.gitmessage を参照してください。

## 基本原則

エージェントが Git コミットを実行する際は、以下のルールに従う必要があります。

### 1. @.gitmessage に記載されたルールに従うこと

@.gitmessage を参照してください。

### 2. 本文の WHY に記載する内容が分からない場合、コミットプロセスを一時停止し、ユーザーに確認すること

コミットメッセージの本文では「なぜ？」を説明する必要があります。もしユーザーが変更の理由を提供していない場合、エージェントはコミットプロセスを一時停止し、「この変更が必要な理由は何ですか？」とユーザーに確認する必要があります。

### 3. コミットメッセージの改行フォーマット

コミットメッセージの本文（WHY/WHAT）は以下のフォーマットに従う必要があります：

1. セクション名の直後には改行を入れない
2. bullet項目（`-` で始まる行）の間には改行を入れない
3. セクション間には1つの改行を入れる

#### 良い例

```
📝 docs(rules): プロジェクトルールを追加

WHY
- プロジェクトの開発ガイドラインを明確化し、一貫性のある開発を実現するため
- AIアシスタントがプロジェクトのルールを理解し、適切な支援を提供できるようにするため

WHAT
- Gitコミットメッセージのルールを追加
- README.mdを追加
```

#### 悪い例

```
📝 docs(rules): プロジェクトルールを追加

WHY

- プロジェクトの開発ガイドラインを明確化し、一貫性のある開発を実現するため

- AIアシスタントがプロジェクトのルールを理解し、適切な支援を提供できるようにするため

WHAT

- Gitコミットメッセージのルールを追加

- README.mdを追加
```

### 4. 一時ファイルを使用したコミット

- コミットメッセージの作成に進む前に、ステージングされたファイルがあるか確認し、なければどうするのかユーザーに指示を仰いでください
  - ※ 仮にステージングされたファイルがなかった場合でも、チャットの文脈からどのファイルを commit するべきか判断可能な場合は、自身の判断で `git add` を行ってください
- コミットメッセージの作成は、必ず以下の3ステップで実行してください
  - ※ これは `git commit` を Cursor の Yolo モードの deny list に入れている & コマンドを連結して実行されると動作しないための措置です

1. 変更のステージング
```bash
# 変更をステージングエリアに追加
git add <files...>
```

2. コミットメッセージの作成
```bash
# コミットメッセージを一時ファイルに書き出し
printf "📝 docs(rules): プロジェクトルールを追加\n\nWHY\n- プロジェクトの開発ガイドラインを明確化し、一貫性のある開発を実現するため\n- AIアシスタントがプロジェクトのルールを理解し、適切な支援を提供できるようにするため\n\nWHAT\n- Gitコミットメッセージのルールを追加\n- README.mdを追加" > .tmp.commit_message.txt
```

3. コミットの実行
```bash
# コミットを実行と一時ファイルを削除
git commit -F commit_message.txt && rm .tmp.commit_message.txt
```

注意事項：
- 一時ファイルは必ず`.tmp`プレフィックスを付けること
- 一時ファイルは必ず issue 作成後に削除すること
- ステップ1を実行する前に、必ず `git status` でステージング対象の変更を確認すること
- ステップ2に進む前に、必ず `git status` でステージングされた変更を確認すること
- -mオプションは、改行を表現できない等の制約があるため使用しないこと


翻訳
