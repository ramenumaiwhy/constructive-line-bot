# ==== 絵文字一覧 ====
# 🎉 :tada: 大きな機能追加
# ✨ :sparkles: 新機能追加
# 🐛 :bug: バグ修正
# 🚑 :ambulance: 緊急のバグ修正
# 📝 :memo: ドキュメント追加・更新
# 💄 :lipstick: UIやスタイルの更新
# 🔄 :arrows_counterclockwise: リファクタリング
# ⚡️ :zap: パフォーマンス改善
# ✅ :white_check_mark: テストの追加・更新
# 🔧 :wrench: 設定変更
# 🚧 :construction: 作業中

# ==== コミットの単位 ====
# 1. 論理的な単位でコミットを分割
#    - 1つの機能追加・修正につき1つのコミット
#    - 複数の機能が混ざらないようにする
#    - テストとその対象機能は同じコミットに含める
#
# 2. 以下の場合は必ず別コミット
#    - 異なる目的や理由による変更
#    - 異なるコンポーネントやモジュールの変更
#    - リファクタリングと機能追加
#    - フォーマット修正と機能変更
#
# 3. コミットの粒度の目安
#    - 設定ファイルの追加・更新（package.json, tsconfig.json等）
#    - フォーマッター・リンターの設定（.eslintrc, .prettierrc等）
#    - 環境変数・シークレット関連（.env.example等）
#    - 機能単位のソースコード（認証機能、API実装等）
#    - ドキュメント類（README, API仕様書等）
#
# 4. 作業中のコミット
#    - WIP（Work In Progress）は避け、完結した変更のみコミット
#    - 作業中の変更は別ブランチで管理
#    - 一時的な変更は確実に元に戻す

# ==== コミットメッセージの形式 ====
# :emoji: type(scope): 変更内容のタイトル
#
# WHY
# この変更が必要な理由や解決する課題を記述
#
# WHAT
# - 具体的な変更内容を箇条書きで記述
# - 技術的な実装詳細（WHAT/HOW）
#
# 関連するIssue番号やBreaking Changesなど

# ==== コミットの種類 ====
# feat: 新機能
# fix: バグ修正
# docs: ドキュメントのみの変更
# style: コードの意味に影響を与えない変更（空白、フォーマット、セミコロンの欠落など）
# refactor: バグを修正したり機能を追加したりしないコードの変更
# perf: パフォーマンスを向上させるコードの変更
# test: 不足しているテストの追加や既存のテストの修正
# chore: ビルドプロセスやドキュメント生成などの補助ツールやライブラリの変更

# ==== 記述ルール ====
# 1. タイトルは50文字以内で記述
# 2. タイトルは「〜を追加」「〜を修正」など、何をしたのかを明確に
# 3. タイトルの最後に句点（。）を付けない
# 4. 本文を書く場合は、タイトルとの間に空行を入れる
# 5. 本文は72文字で改行
# 6. フッター（関連Issue等）は本文との間に空行を入れて記述
# 7. 重要な変更の場合は、必ず背景・理由（WHY）を記述する
# 8. 言語の使い分け
#    - type: 英語のみ（feat, fix, docs, etc...）
#    - scope: 英語のみ（auth, ui, core, etc...）
#    - タイトル: 日本語（「〜を追加」「〜を修正」など）
#    - WHY/WHAT: 日本語
#    - フッター: 日本語（例: 「関連: #123」）

# ==== コミットメッセージ例 ====
# ✨ feat(auth): Googleログイン機能を追加
#
# WHY
# - ユーザーからSNSログインの要望が多く寄せられていた（Issue #100）
# - メールアドレス認証に比べて、ユーザー登録のハードルを下げることが目的
# - 既存のユーザーベースの多くがGoogleアカウントを保有している
#
# WHAT
# - OAuth2.0による認証フローを実装
# - ユーザープロフィール情報の取得処理を追加
# - セッション管理機能を実装
#
# 関連: #123
